1.01 ------------------------------------------------------

ALGORITMO
	DECLARE num NUMÉRICO
	ESCREVA "Digite um Número: "
	LEIA(num)
	ESCREVA "Binário: ",binario(num)
FIM_ALGORITMO

SUB-ROTINA binario(num)
	SE num < 2 ENTÃO
		RETORNE str(num%2)
	SENÃO 
		RETORNE binario(num//2) + str(num%2)
FIM_SUB-ROTINA

1.02 ------------------------------------------------------

ALGORITMO
	DECLARE num1, num2 NUMÉRICO
	ESCREVA "Digite N1 e N2"
	LEIA(num1,num2)
	ESCREVA "Multiplicação: ",multiplica(num1,num2)
FIM_ALGORITMO

SUB-ROTINA multiplica(num1,num2)
	SE num2 == 0 ENTÃO 
		RETORNE num2
	SENÃO SE num2 == 1 ENTÃO
		RETORNE num1
	SENÃO 
		RETORNE num1 + multiplica(num1,num2-1)
FIM_SUB-ROTINA

1.03 ------------------------------------------------------ 

ALGORITMO
	DECLARE n1,n2 NUMÉRICO
	ESCREVA "Digite n1 e n2: "
	LEIA(n1,n2)
	ESCREVA "Soma:",soma(n1,n2)
FIM_ALGORITMO

SUB-ROTINA soma(n1,n2):
    SE n2 == 0 ENTÃO
        RETORNE n1
    SENÃO
        RETORNE soma(n1,n2-1) + 1
FIM_SUB-ROTINA

1.04 ------------------------------------------------------

ALGORITMO
	DECLARE n1,n2,c NUMÉRICO
	ESCREVA "Digite n1 e n2: "
	LEIA(n1,n2)
	c = ((n1*n2)-n1)
	ESCREVA "Multiplicação: ",mult(n1,c)
FIM_ALGORITMO

SUB-ROTINA mult(num1,c)
    	SE c == 0 ENTÃO 
		RETORNE num1
    	SENÃO
        	RETORNE mult(num1,c-1) + 1
FIM_SUB-ROTINA

1.05 ------------------------------------------------------

ALGORITMO
	DECLARE num1,num2 NUMÉRICO
	ESCREVA "Digite n1 e n2: "
	LEIA(n1,n2)
	ESCREVA "Multiplicação: ",multiplica(num1,num2)
FIM_ALGORITMO

SUB-ROTINA multiplica(num1,num2)
  	SE num2 < 0 E num1 < 0 ENTÃO
    		num1 = num1*(-1)
    		num2 = num2*(-1)
  	SE num2<0 ENTÃO
    		RETORNE num1*(-1) + multiplica(num1,num2+1)
  	SENÃO SE num2 == 0 ENTÃO
    		RETORNE num2
 	SENÃO SE num2 == 1 ENTÃO
    		RETORNE num1
  	SENÃO
    		RETORNE num1 + multiplica(num1,num2-1)
FIM_SUB-ROTINA

1.06 ------------------------------------------------------

ALGORITMO
	DECLARE n NUMERICO
	ESCREVA ('Escreva um numero natural n: ')
	LEIA n
	gerarComb(n)
FIM_ALGORITMO

SUB-ROTINA permutacoes (a[] NUMERICO, step NUMERICO)
    DECLARE lista_cop VETOR
    SE (NAO step) ENTAO
        step = 0    
    SE (step == LEN(array)) ENTAO
        PARA i <- 1 ATE LEN(array) FACA PASSO 1
            ESCREVA (array[i])
    PARA i <- step ATE LEN(array) FACA PASSO 1
    INICIO
        lista_cop <- array
        lista_cop[step] <- lista_cop[i]
        lista_cop[i] <- lista_cop[step]
        permutacoes (lista_cop, step + 1)
    FIM    
FIM_SUB-ROTINA permutacoes

SUB-ROTINA gerarComb (n NUMERICO)
    DECLARE letras[] LITERAL
    PARA i <- 65 ATE 65 + n FACA PASSO 1
        letras[i] <- CHR(i) #chr do python
    permutacoes(letras)
FIM_SUB-ROTINA gerarComb

1.07 ------------------------------------------------------




1.08 ------------------------------------------------------

ALGORITMO
	DECLARE num NUMÉRICO
	ESCREVA "Digite o número de ordem da série: "
	LEIA(num)	
	ESCREVA "Termo: ",fibonacci(num)
FIM_ALGORITMO

SUB-ROTINA fibonacci(num)
    	SE num < 2 ENTÃO
        	RETORNE num
    	SENÃO
      		RETORNE fibonacci(num-1) + fibonacci(num-2)
FIM_SUB-ROTINA

1.09 ------------------------------------------------------

ALGORITMO
	DECLARE numero, x NUMÉRICO
	sequencia TEXTO
	ESCREVA "Digite o número da ordem de Fibonacci: "
	LEIA(numero)
	sequencia = ""
	PARA x = 0 DE 1 ATÉ numero FAÇA
    		sequencia = sequencia + str(fibonacci(x)) + " "
	ESCREVA "Ordem de Fibonacci até o termo: ",sequencia
FIM_ALGORITMO

SUB-ROTINA fibonacci(n)
    	SE n < 2 ENTÃO
        	RETORNE n
    	SENÃO
        	RETORNE fibonacci(n-1)+fibonacci(n-2)		
FIM_SUB-ROTINA

1.10 ------------------------------------------------------

ALGORITMO
	DECLARE numero NUMÉRICO
	ESCREVA "Digite os N primeiros termos: "
	LEIA(numero)
	ESCREVA "Somatório: ",somatorio(numero)
FIM_ALGORITMO

SUB-ROTINA somatorio(numero)
    	SE numero == 0 ENTÃO
        	RETORNE numero
    	SENÃO
        	RETORNE somatorio(numero-1) + numero
FIM_SUB-ROTINA

1.11 ------------------------------------------------------

ALGORITMO
	DECLARE tamanho_array, array[] NUMÉRICO
	array = [12,3.2,3.8,2,3.2,4.8]
	tamanho_array = len(array)
	ESCREVA "Soma:",somaarray(array,tamanho_array)
FIM_ALGORITMO

SUB-ROTINA somaarray(array,tamanho_array)
    	SE tamanho_array == 1 ENTÃO
        	RETORNE array[0]
    	SENÃO
        	RETORNE somaarray(array,tamanho_array-1) + array[tamanho_array-1]	
FIM_SUB-ROTINA

1.12 ------------------------------------------------------

ALGORITMO
	DECLARE inteiros[], tamanho, maior_inteiro NUMÉRICO
	inteiros = [1,2,3,4,5,2,3]
	tamanho = len(inteiros)-1
	maior_inteiro = inteiros[tamanho]
	ESCREVA "Lista:",inteiros    
	ESCREVA "Maior inteiro:",maiorint(inteiros,tamanho,maior_inteiro)
FIM_ALGORITMO

SUB-ROTINA maiorint(inteiros,tamanho,maior_inteiro)
    	SE inteiros[tamanho-1] > maior_inteiro ENTÃO
        	maior_inteiro = inteiros[tamanho-1]
    	SE tamanho == 1 ENTÃO
        	RETORNE maior_inteiro
    	SENÃO
        	RETORNE maiorint(inteiros,tamanho-1,maior_inteiro)
FIM_SUB-ROTINA

1.13 ------------------------------------------------------

ALGORITMO
	DECLARE vetor[], tamanho, tamanho2,vetor_invertido[] NUMÉRICO
	vetor = [9,8,7,6,5]
	tamanho = 0
	tamanho2 = len(vetor)-1
	vetor_invertido = [0] * len(vetor)
	ESCREVA "Vetor:",vetor
	ESCREVA "Vetor Invertido:",inverter(vetor,tamanho,tamanho2,vetor_invertido)
FIM_ALGORITMO

SUB-ROTINA inverter(vetor,tamanho,tamanho2,vetor_invertido)
   	SE tamanho == len(vetor)-1 ENTÃO
        	vetor_invertido[tamanho2] = vetor[tamanho]
        	RETORNE vetor_invertido
    	SENÃO
        	vetor_invertido[tamanho2] = vetor[tamanho]
        	RETORNE inverter(vetor,tamanho+1,tamanho2-1,vetor_invertido)
FIM_SUB-ROTINA

1.14 ------------------------------------------------------

ALGORITMO
	DECLARE discos NUMÉRICO
		origem,destino,auxiliar TEXTO
	resolveHanoi(4,"haste inicial","haste final","haste auxiliar")
FIM_ALGORITMO    

SUB-ROTINA resolveHanoi(discos, origem, destino,auxiliar)
    SE (discos > 0) ENTÃO
	INICIO
        resolveHanoi(discos-1,origem,auxiliar,destino)
        ESCREVA "Mover disco ", discos, " de ", origem, " para ", destino
        resolveHanoi(discos-1,auxiliar,destino,origem)
	FIM
FIM_SUB-ROTINA


1.15 ------------------------------------------------------

ALGORITMO
	DECLARE palavra,palav TEXTO
		tamanho NUMÉRICO
	palavra = input("Digite uma palavra: ")
	tamanho = 1
	palav = palindromo(palavra,tamanho)
		SE palav == palavra ENTÃO
    			ESCREVA palavra,"é palíndromo pois sua inversa é",palav
		SENÃO
    			ESCREVA palavra,"não é palíndromo pois sua inversa é",palav
FIM_ALGORITMO

SUB-ROTINA palindromo(palavra,tamanho)
    	SE tamanho == len(palavra) ENTÃO
	        RETORNE palavra[tamanho-1]
    	SENÃO
        	RETORNE palindromo(palavra,tamanho+1) + palavra[tamanho-1]
FIM_SUB-ROTINA